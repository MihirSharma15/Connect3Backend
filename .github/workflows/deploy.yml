name: Build and Deploy to EC2 Instance

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your code
      - name: Check out repo
        uses: actions/checkout@v3

      # 2) Set up AWS credentials (from GitHub Secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3) Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # 4) Create .env file
      - name: Create .env file
        run: |
          echo "${{ secrets.DOTENV_FILE }}" > .env
          ls -l
          cat .env

      # 5) Build and tag Docker image
      - name: Build Docker image
        run: |
          # OPTIONAL: define an image tag, e.g. the short Git commit SHA or 'latest'
          IMAGE_TAG=${GITHUB_SHA::7} 
          
          # Build image from Dockerfile in the root (adjust if your Dockerfile is elsewhere)
          docker build -t connect3v3:$IMAGE_TAG .
          
          # Tag for ECR
          docker tag connect3v3:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker tag connect3v3:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest  # optional 'latest' tag

      # 6) Push the image to ECR
      - name: Push to ECR
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # 7) SSH into EC2, pull the new image, and run it
      - name: Deploy FastAPI to EC2
        run: |
          # Write our SSH key to a file
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ec2_key.pem
          chmod 400 ec2_key.pem

          # OPTIONAL: If your EC2 instance needs to log in to ECR:
          # Ensure it can run `aws` commands or has the correct IAM role

          scp -o StrictHostKeyChecking=no -i ec2_key.pem .env ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/.env

          # SSH in and run commands
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "\
          # Check if Docker Network exists, if it doesn't, create it.
          docker network inspect mynetwork >/dev/null 2>&1 || docker network create mynetwork \

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }} \
            && docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
            && docker stop connect3v3 || true \
            && docker rm connect3v3 || true \
            && docker run -d \
               --env-file /home/ec2-user/.env \
               --network mynetwork \
               -p 8080:8080 --restart always \
               --name connect3v3 \
               ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
          "
      # 8) Restart Reverse Proxy
      - name: Deploy & Restart Reverse Proxy
        run: |

          # Copy the Caddyfile to EC2 (if updated)
          scp -o StrictHostKeyChecking=no -i ec2_key.pem Caddyfile ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/Caddyfile

          # SSH into EC2 and restart the reverse proxy container (Caddy)
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "\
          # Ensure the Docker network exists
            docker network inspect mynetwork >/dev/null 2>&1 || docker network create mynetwork \
            docker stop caddy-proxy || true \
            && docker rm caddy-proxy || true \
            && docker run -d \
               --network mynetwork \
               --restart always \
               --name caddy-proxy \
               -p 443:443 -p 80:80 \
               -v /home/ec2-user/Caddyfile:/etc/caddy/Caddyfile \
               caddy:2 \
          "